#!/bin/zsh

RESET="\033[0m"
BOLD="\033[1m"
UNDER="\033[4m"
FG_RED="\033[31m"
FG_GREEN="\033[32m"
FG_YELLOW="\033[33m"
FG_BLUE="\033[34m"
FG_MAGENTA="\033[35m"
FG_CYAN="\033[36m"
FG_WHITE="\033[97m"

SEP="${FG_MAGENTA}────────────────────────────────────────────────────${RESET}"
PROMPT="${FG_CYAN}❯${RESET}"

ICON_MOUNT="${FG_GREEN}\uf019${RESET}"
ICON_UMOUNT="${FG_RED}\uf1f8${RESET}"
ICON_EXPLORER="${FG_YELLOW}\uf07b${RESET}"
ICON_EDIT="${FG_CYAN}\uf044${RESET}"
ICON_BACK="${FG_BLUE}\uf0e2${RESET}"
ICON_HELP="${FG_MAGENTA}\uf059${RESET}"
ICON_EXIT="${FG_RED}\uf2f5${RESET}"
ICON_EDITOR="${FG_CYAN}\ue7c5${RESET}"
ICON_FOLDER="${FG_YELLOW}\uf115${RESET}"

typeset -A MENU_MAIN=(
    [M]="${ICON_MOUNT} [${UNDER}${FG_GREEN}M${RESET}] Mount"
    [U]="${ICON_UMOUNT} [${UNDER}${FG_RED}U${RESET}] Unmount"
    [E]="${ICON_EXPLORER} [${UNDER}${FG_YELLOW}E${RESET}] Explorer"
    [D]="${ICON_EDIT} [${UNDER}${FG_CYAN}D${RESET}] Edit config file"
    [H]="${ICON_HELP} [${UNDER}${FG_MAGENTA}H${RESET}] Help"
    [X]="${ICON_EXIT} [${UNDER}${FG_RED}X${RESET}] Exit"
)

BACK_LABEL="${ICON_BACK} [${UNDER}${FG_BLUE}B${RESET}] Back to Main Menu"
EXIT_LABEL="${ICON_EXIT} [${UNDER}${FG_RED}X${RESET}] Exit"

_ERROR_MESSAGE=""
_SUCCESS_MESSAGE=""

RCLONEM_JSON=$HOME/.config/rclonem/config.json
RCLONEM_HELP=$HOME/.config/rclonem/help.txt

if [ ! -e "$RCLONEM_JSON" ]; then
    mkdir -p "$(dirname "$RCLONEM_JSON")" && touch "$RCLONEM_JSON"
    cat >"$RCLONEM_JSON" <<EOF
{
    "options": {
        "editor": "/usr/bin/nano",
        "explorer": "yazi"
    },
    "points": {}
}
EOF
fi

if [ ! -e "$RCLONEM_HELP" ]; then
    mkdir -p "$(dirname "$RCLONEM_HELP")" && touch "$RCLONEM_HELP"
    cat >"$RCLONEM_HELP" <<EOF
== RCLONE MANAGER ================================================

-- INFO

Rclone Manager is a CLI tool to mount and unmount remote directories using rclone.
EOF
fi

GET_OPTIONS() {
    EDITOR=$(jshon -e options -e editor -u -Q <"$RCLONEM_JSON")
    EXPLORER=$(jshon -e options -e explorer -u -Q <"$RCLONEM_JSON")
    LENGTHS=$(jshon -e points -l -Q <"$RCLONEM_JSON")
    
    LIST_POINTS=()
    LIST_MOUNTED_POINTS=()
    LIST_UMOUNTED_POINTS=()
    
    while read -r i; do
        if [[ -n "$i" ]]; then
            LIST_POINTS+=("$i")
        fi
    done < <(jshon -e points -k -S -Q <"${RCLONEM_JSON}")
    
    for i in "${LIST_POINTS[@]}"; do
        LOCAL_DIRECTORY=$(jshon -e points -e "$i" -e "local_directory" -u -Q <"${RCLONEM_JSON}")
        RESULT=$(IS_MOUNTED "$LOCAL_DIRECTORY")
        if [[ $RESULT == 1 ]]; then
            LIST_MOUNTED_POINTS+=("$i")
        else
            LIST_UMOUNTED_POINTS+=("$i")
        fi
    done
}

IS_MOUNTED() {
    if (($(mount | grep -c "$1") > 0)); then
        echo 1
    else
        echo 0
    fi
}

PRINT_HEADER() {
    clear
    echo -e "${FG_BLUE}${BOLD}                 RCLONE MANAGER                 ${RESET}"
    echo -e "$SEP"
}

PRINT_FOOTER() {
    echo -e "$SEP"
    echo -e "  ${ICON_EDITOR}  ${FG_CYAN}Editor:${RESET} $EDITOR"
    echo -e "  ${ICON_FOLDER}  ${FG_YELLOW}Explorer:${RESET} $EXPLORER"
    echo -e "$SEP"
}

SHOW_MSGS() {
    if [ -n "$_ERROR_MESSAGE" ]; then
        echo -e "${FG_MAGENTA}${BOLD}Error:${RESET} ${FG_RED}${_ERROR_MESSAGE}${RESET}"
        echo ""
        _ERROR_MESSAGE=""
    fi
    if [ -n "$_SUCCESS_MESSAGE" ]; then
        echo -e "${FG_GREEN}${BOLD}Success:${RESET} ${FG_GREEN}${_SUCCESS_MESSAGE}${RESET}"
        echo ""
        _SUCCESS_MESSAGE=""
    fi
}

MENU_MAIN() {
    while true; do
        PRINT_HEADER
        SHOW_MSGS
        GET_OPTIONS
        echo -e "${FG_YELLOW}${BOLD}Main Menu:${RESET}\n"
        if [[ $LENGTHS -le 0 ]]; then
            for k in D H X; do
                echo -e "  ${MENU_MAIN[$k]}"
            done
            ACTIVE_KEYS=(D H X)
        else
            for k in M U E D H X; do
                echo -e "  ${MENU_MAIN[$k]}"
            done
            ACTIVE_KEYS=(M U E D H X)
        fi
        PRINT_FOOTER
        echo -ne "$PROMPT Choose action by letter: "
        read -k1 key
        while read -t 0; do read; done
        echo
        key=$(echo "$key" | tr '[:lower:]' '[:upper:]')
        case "$key" in
        M) [[ $LENGTHS -gt 0 ]] && MENU_MOUNT ;;
        U) [[ $LENGTHS -gt 0 ]] && MENU_UMOUNT ;;
        E) [[ $LENGTHS -gt 0 ]] && MENU_EXPLORER ;;
        D) EDIT ;;
        H) HELP ;;
        X) EXIT ;;
        "") _ERROR_MESSAGE="Invalid option!" ;;
        *) _ERROR_MESSAGE="Invalid option!" ;;
        esac
    done
}

MENU_MOUNT() {
    while true; do
        PRINT_HEADER
        SHOW_MSGS
        GET_OPTIONS
        echo -e "${FG_GREEN}${BOLD}Choose point to mount:${RESET}\n"
        
        if [[ ${#LIST_UMOUNTED_POINTS[@]} -eq 0 ]]; then
            echo -e "  ${FG_YELLOW}No unmounted points available.${RESET}\n"
            echo -e "  $BACK_LABEL"
            echo -e "  $EXIT_LABEL"
            PRINT_FOOTER
            echo -ne "$PROMPT Return to main menu? [B/X]: "
            read -k1 userkey
            while read -t 0; do read; done
            echo
            userkey=$(echo "$userkey" | tr '[:lower:]' '[:upper:]')
            if [[ "$userkey" == "X" ]]; then
                EXIT
            else
                return
            fi
        fi
        
        typeset -A mount_map
        local counter=1
        for i in "${LIST_UMOUNTED_POINTS[@]}"; do
            if [[ $counter -gt 9 ]]; then break; fi
            
            mount_map[$counter]="$i"
            LOCAL_DIR=$(jshon -e points -e "$i" -e "local_directory" -u -Q <"${RCLONEM_JSON}")
            echo -e "  ${ICON_MOUNT} [${BOLD}${FG_GREEN}${counter}${RESET}] ${FG_GREEN}${i}${RESET} ${FG_CYAN}→${RESET} ${FG_YELLOW}${LOCAL_DIR}${RESET}"
            ((counter++))
        done
        
        echo -e "  $BACK_LABEL"
        echo -e "  $EXIT_LABEL"
        PRINT_FOOTER
        
        echo -ne "$PROMPT Mount by number (or B/X): "
        read -k1 userkey
        while read -t 0; do read; done
        echo
        userkey=$(echo "$userkey" | tr '[:lower:]' '[:upper:]')
        
        if [[ "$userkey" == "B" ]]; then
            return
        elif [[ "$userkey" == "X" ]]; then
            EXIT
        elif [[ "$userkey" =~ [1-9] ]]; then
            POINT="${mount_map[$userkey]}"
            
            if [[ -z "$POINT" ]]; then
                _ERROR_MESSAGE="Invalid selection!"
                continue
            fi
            
            REMOTE_NAME=$(jshon -e points -e "$POINT" -e "remote_name" -u -Q <"${RCLONEM_JSON}")
            REMOTE_PATH=$(jshon -e points -e "$POINT" -e "remote_path" -u -Q <"${RCLONEM_JSON}")
            LOCAL_DIRECTORY=$(jshon -e points -e "$POINT" -e "local_directory" -u -Q <"${RCLONEM_JSON}")
            
            REMOTE_SPEC="${REMOTE_NAME}:${REMOTE_PATH}"
            [ -z "$REMOTE_PATH" ] || [ "$REMOTE_PATH" = "/" ] && REMOTE_SPEC="${REMOTE_NAME}:"
            [ ! -d "$LOCAL_DIRECTORY" ] && mkdir -p "$LOCAL_DIRECTORY"
            
            OPTIONS=()
            if jshon -e points -e "$POINT" -e "options" <"${RCLONEM_JSON}" 2>/dev/null | grep -q '\['; then
                while read -r opt; do 
                    OPTIONS+=("$opt")
                done < <(jshon -e points -e "$POINT" -e "options" -a -u <"${RCLONEM_JSON}" 2>/dev/null)
            fi
            
            echo -e "\n${FG_YELLOW}Mounting ${FG_GREEN}$REMOTE_SPEC${RESET} ${FG_CYAN}→${RESET} ${FG_YELLOW}$LOCAL_DIRECTORY${RESET} ${FG_MAGENTA}(please wait)${RESET}"
            rclone mount "$REMOTE_SPEC" "$LOCAL_DIRECTORY" "${OPTIONS[@]}" --daemon
            sleep 2
            RESULT=$(IS_MOUNTED "$LOCAL_DIRECTORY")
            if [[ $RESULT == 1 ]]; then
                _SUCCESS_MESSAGE="${REMOTE_NAME} mounted successfully!"
            else
                _ERROR_MESSAGE="${REMOTE_NAME} could not be mounted!"
            fi
        else
            _ERROR_MESSAGE="Invalid option!"
        fi
    done
}

MENU_UMOUNT() {
    while true; do
        PRINT_HEADER
        SHOW_MSGS
        GET_OPTIONS
        echo -e "${FG_RED}${BOLD}Choose point to unmount:${RESET}\n"
        
        if [[ ${#LIST_MOUNTED_POINTS[@]} -eq 0 ]]; then
            echo -e "  ${FG_YELLOW}No mounted points available.${RESET}\n"
            echo -e "  $BACK_LABEL"
            echo -e "  $EXIT_LABEL"
            PRINT_FOOTER
            echo -ne "$PROMPT Return to main menu? [B/X]: "
            read -k1 userkey
            while read -t 0; do read; done
            echo
            userkey=$(echo "$userkey" | tr '[:lower:]' '[:upper:]')
            if [[ "$userkey" == "X" ]]; then
                EXIT
            else
                return
            fi
        fi
        
        typeset -A umount_map
        local counter=1
        for i in "${LIST_MOUNTED_POINTS[@]}"; do
            if [[ $counter -gt 9 ]]; then break; fi
            
            umount_map[$counter]="$i"
            LOCAL_DIR=$(jshon -e points -e "$i" -e "local_directory" -u -Q <"${RCLONEM_JSON}")
            echo -e "  ${ICON_UMOUNT} [${BOLD}${FG_RED}${counter}${RESET}] ${FG_RED}${i}${RESET} ${FG_CYAN}→${RESET} ${FG_YELLOW}${LOCAL_DIR}${RESET}"
            ((counter++))
        done
        
        echo -e "  $BACK_LABEL"
        echo -e "  $EXIT_LABEL"
        PRINT_FOOTER
        
        echo -ne "$PROMPT Unmount by number (or B/X): "
        read -k1 userkey
        while read -t 0; do read; done
        echo
        userkey=$(echo "$userkey" | tr '[:lower:]' '[:upper:]')
        
        if [[ "$userkey" == "B" ]]; then
            return
        elif [[ "$userkey" == "X" ]]; then
            EXIT
        elif [[ "$userkey" =~ [1-9] ]]; then
            POINT="${umount_map[$userkey]}"
            
            if [[ -z "$POINT" ]]; then
                _ERROR_MESSAGE="Invalid selection!"
                continue
            fi
            
            REMOTE_NAME=$(jshon -e points -e "$POINT" -e "remote_name" -u -Q <"${RCLONEM_JSON}")
            LOCAL_DIRECTORY=$(jshon -e points -e "$POINT" -e "local_directory" -u -Q <"${RCLONEM_JSON}")
            
            if [[ -z "$LOCAL_DIRECTORY" ]]; then
                _ERROR_MESSAGE="No local directory specified for $POINT!"
                continue
            fi
            
            echo -e "\n${FG_YELLOW}Unmounting ${FG_RED}$REMOTE_NAME${RESET} ${FG_YELLOW}from${RESET} ${FG_CYAN}$LOCAL_DIRECTORY${RESET}..."
            
            fusermount -u "$LOCAL_DIRECTORY" 2>/dev/null
            sleep 1
            
            RESULT=$(IS_MOUNTED "$LOCAL_DIRECTORY")
            if [[ $RESULT == 0 ]]; then
                _SUCCESS_MESSAGE="$REMOTE_NAME unmounted successfully!"
            else
                umount "$LOCAL_DIRECTORY" 2>/dev/null
                sleep 1
                RESULT=$(IS_MOUNTED "$LOCAL_DIRECTORY")
                if [[ $RESULT == 0 ]]; then
                    _SUCCESS_MESSAGE="$REMOTE_NAME unmounted successfully!"
                else
                    echo -e "${FG_YELLOW}Attempting sudo unmount (may require password)...${RESET}"
                    sudo umount "$LOCAL_DIRECTORY" 2>/dev/null
                    sleep 1
                    RESULT=$(IS_MOUNTED "$LOCAL_DIRECTORY")
                    if [[ $RESULT == 0 ]]; then
                        _SUCCESS_MESSAGE="$REMOTE_NAME unmounted successfully!"
                    else
                        _ERROR_MESSAGE="$REMOTE_NAME could not be unmounted! Try manually with 'sudo umount $LOCAL_DIRECTORY'."
                    fi
                fi
            fi
        else
            _ERROR_MESSAGE="Invalid option!"
        fi
    done
}

MENU_EXPLORER() {
    while true; do
        PRINT_HEADER
        SHOW_MSGS
        GET_OPTIONS
        echo -e "${FG_YELLOW}${BOLD}Explore mounted point:${RESET}\n"
        
        if [[ ${#LIST_MOUNTED_POINTS[@]} -eq 0 ]]; then
            echo -e "  ${FG_YELLOW}No mounted points available.${RESET}\n"
            echo -e "  $BACK_LABEL"
            echo -e "  $EXIT_LABEL"
            PRINT_FOOTER
            echo -ne "$PROMPT Return to main menu? [B/X]: "
            read -k1 userkey
            while read -t 0; do read; done
            echo
            userkey=$(echo "$userkey" | tr '[:lower:]' '[:upper:]')
            if [[ "$userkey" == "X" ]]; then
                EXIT
            else
                return
            fi
        fi
        
        typeset -A explore_map
        local counter=1
        for i in "${LIST_MOUNTED_POINTS[@]}"; do
            if [[ $counter -gt 9 ]]; then break; fi
            
            explore_map[$counter]="$i"
            LOCAL_DIR=$(jshon -e points -e "$i" -e "local_directory" -u -Q <"${RCLONEM_JSON}")
            echo -e "  ${ICON_EXPLORER} [${BOLD}${FG_YELLOW}${counter}${RESET}] ${FG_GREEN}${i}${RESET} ${FG_CYAN}→${RESET} ${FG_YELLOW}${LOCAL_DIR}${RESET}"
            ((counter++))
        done
        
        echo -e "  $BACK_LABEL"
        echo -e "  $EXIT_LABEL"
        PRINT_FOOTER
        
        echo -ne "$PROMPT Explore by number (or B/X): "
        read -k1 userkey
        while read -t 0; do read; done
        echo
        userkey=$(echo "$userkey" | tr '[:lower:]' '[:upper:]')
        
        if [[ "$userkey" == "B" ]]; then
            return
        elif [[ "$userkey" == "X" ]]; then
            EXIT
        elif [[ "$userkey" =~ [1-9] ]]; then
            POINT="${explore_map[$userkey]}"
            
            if [[ -z "$POINT" ]]; then
                _ERROR_MESSAGE="Invalid selection!"
                continue
            fi
            
            LOCAL_DIRECTORY=$(jshon -e points -e "$POINT" -e "local_directory" -u -Q <"${RCLONEM_JSON}")
            
            if [[ -z "$LOCAL_DIRECTORY" ]] || [[ ! -d "$LOCAL_DIRECTORY" ]]; then
                _ERROR_MESSAGE="Directory $LOCAL_DIRECTORY is not accessible!"
                continue
            fi
            
            $EXPLORER "$LOCAL_DIRECTORY"
        else
            _ERROR_MESSAGE="Invalid option!"
        fi
    done
}

EDIT() {
    $EDITOR "$RCLONEM_JSON"
}

HELP() {
    less "$RCLONEM_HELP"
}

EXIT() {
    echo -e "${FG_YELLOW}Bye!${RESET}"
    exit 0
}

DEBUG_ARRAY() {
    local array_name=$1
    local array=("${(P)array_name[@]}")
    
    echo "Debug: $array_name has ${#array[@]} elements"
    for i in {1..${#array[@]}}; do
        echo "  $i: ${array[$i-1]}"
    done
}

MENU_MAIN
